// Code generated by protoc-gen-go.
// source: contentservice.proto
// DO NOT EDIT!

/*
Package contentservice is a generated protocol buffer package.

It is generated from these files:
	contentservice.proto

It has these top-level messages:
	PutRequest
	JSONRPCRequest
	PutResponse
	InspiPutResponse
	VendorWebPutResponse
	JSONRPCResult
	JSONRPCError
	JSONRPCResponse
*/
package contentservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request sent to the server
type PutRequest struct {
	Contractorid int64  `protobuf:"varint,1,opt,name=contractorid" json:"contractorid,omitempty"`
	Ordernumber  int64  `protobuf:"varint,2,opt,name=ordernumber" json:"ordernumber,omitempty"`
	Imagetype    int32  `protobuf:"varint,3,opt,name=imagetype" json:"imagetype,omitempty"`
	Filename     string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	Imagewidth   int32  `protobuf:"varint,5,opt,name=imagewidth" json:"imagewidth,omitempty"`
	Imageheight  int32  `protobuf:"varint,6,opt,name=imageheight" json:"imageheight,omitempty"`
	Releasedate  string `protobuf:"bytes,7,opt,name=releasedate" json:"releasedate,omitempty"`
	Deptcode     string `protobuf:"bytes,8,opt,name=deptcode" json:"deptcode,omitempty"`
	Filecontents string `protobuf:"bytes,9,opt,name=filecontents" json:"filecontents,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutRequest) GetContractorid() int64 {
	if m != nil {
		return m.Contractorid
	}
	return 0
}

func (m *PutRequest) GetOrdernumber() int64 {
	if m != nil {
		return m.Ordernumber
	}
	return 0
}

func (m *PutRequest) GetImagetype() int32 {
	if m != nil {
		return m.Imagetype
	}
	return 0
}

func (m *PutRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *PutRequest) GetImagewidth() int32 {
	if m != nil {
		return m.Imagewidth
	}
	return 0
}

func (m *PutRequest) GetImageheight() int32 {
	if m != nil {
		return m.Imageheight
	}
	return 0
}

func (m *PutRequest) GetReleasedate() string {
	if m != nil {
		return m.Releasedate
	}
	return ""
}

func (m *PutRequest) GetDeptcode() string {
	if m != nil {
		return m.Deptcode
	}
	return ""
}

func (m *PutRequest) GetFilecontents() string {
	if m != nil {
		return m.Filecontents
	}
	return ""
}

// Request sent to the servicebus Put call
type JSONRPCRequest struct {
	Jsonrpc        string      `protobuf:"bytes,1,opt,name=jsonrpc" json:"jsonrpc,omitempty"`
	Method         string      `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Params         *PutRequest `protobuf:"bytes,3,opt,name=params" json:"params,omitempty"`
	Id             int32       `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	Asyncmessageid int32       `protobuf:"varint,5,opt,name=asyncmessageid" json:"asyncmessageid,omitempty"`
	Traceid        int32       `protobuf:"varint,6,opt,name=traceid" json:"traceid,omitempty"`
}

func (m *JSONRPCRequest) Reset()                    { *m = JSONRPCRequest{} }
func (m *JSONRPCRequest) String() string            { return proto.CompactTextString(m) }
func (*JSONRPCRequest) ProtoMessage()               {}
func (*JSONRPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JSONRPCRequest) GetJsonrpc() string {
	if m != nil {
		return m.Jsonrpc
	}
	return ""
}

func (m *JSONRPCRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *JSONRPCRequest) GetParams() *PutRequest {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *JSONRPCRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *JSONRPCRequest) GetAsyncmessageid() int32 {
	if m != nil {
		return m.Asyncmessageid
	}
	return 0
}

func (m *JSONRPCRequest) GetTraceid() int32 {
	if m != nil {
		return m.Traceid
	}
	return 0
}

// Response from the Server
type PutResponse struct {
	Result *JSONRPCResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Error  *JSONRPCError  `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutResponse) GetResult() *JSONRPCResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *PutResponse) GetError() *JSONRPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

type InspiPutResponse struct {
	Photodetailid int64 `protobuf:"varint,1,opt,name=photodetailid" json:"photodetailid,omitempty"`
}

func (m *InspiPutResponse) Reset()                    { *m = InspiPutResponse{} }
func (m *InspiPutResponse) String() string            { return proto.CompactTextString(m) }
func (*InspiPutResponse) ProtoMessage()               {}
func (*InspiPutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InspiPutResponse) GetPhotodetailid() int64 {
	if m != nil {
		return m.Photodetailid
	}
	return 0
}

type VendorWebPutResponse struct {
	Documentid   int64 `protobuf:"varint,1,opt,name=documentid" json:"documentid,omitempty"`
	Annotationid int64 `protobuf:"varint,2,opt,name=annotationid" json:"annotationid,omitempty"`
}

func (m *VendorWebPutResponse) Reset()                    { *m = VendorWebPutResponse{} }
func (m *VendorWebPutResponse) String() string            { return proto.CompactTextString(m) }
func (*VendorWebPutResponse) ProtoMessage()               {}
func (*VendorWebPutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VendorWebPutResponse) GetDocumentid() int64 {
	if m != nil {
		return m.Documentid
	}
	return 0
}

func (m *VendorWebPutResponse) GetAnnotationid() int64 {
	if m != nil {
		return m.Annotationid
	}
	return 0
}

// Message when Put request succeeded
type JSONRPCResult struct {
	Contractorid          int32                 `protobuf:"varint,1,opt,name=contractorid" json:"contractorid,omitempty"`
	Releasedate           string                `protobuf:"bytes,2,opt,name=releasedate" json:"releasedate,omitempty"`
	Scandate              string                `protobuf:"bytes,3,opt,name=scandate" json:"scandate,omitempty"`
	Imagetype             int32                 `protobuf:"varint,4,opt,name=imagetype" json:"imagetype,omitempty"`
	Imagewidth            int32                 `protobuf:"varint,5,opt,name=imagewidth" json:"imagewidth,omitempty"`
	Imageheight           int32                 `protobuf:"varint,6,opt,name=imageheight" json:"imageheight,omitempty"`
	Deptcode              string                `protobuf:"bytes,7,opt,name=deptcode" json:"deptcode,omitempty"`
	Descprefix            string                `protobuf:"bytes,8,opt,name=descprefix" json:"descprefix,omitempty"`
	Desctext              string                `protobuf:"bytes,9,opt,name=desctext" json:"desctext,omitempty"`
	Category              string                `protobuf:"bytes,10,opt,name=category" json:"category,omitempty"`
	Ordernumber           int64                 `protobuf:"varint,11,opt,name=ordernumber" json:"ordernumber,omitempty"`
	Archived              string                `protobuf:"bytes,12,opt,name=archived" json:"archived,omitempty"`
	Datecreated           string                `protobuf:"bytes,13,opt,name=datecreated" json:"datecreated,omitempty"`
	Datemodefied          string                `protobuf:"bytes,14,opt,name=datemodefied" json:"datemodefied,omitempty"`
	Filesize              int32                 `protobuf:"varint,15,opt,name=filesize" json:"filesize,omitempty"`
	Id                    int32                 `protobuf:"varint,16,opt,name=id" json:"id,omitempty"`
	Imagefilename         string                `protobuf:"bytes,17,opt,name=imagefilename" json:"imagefilename,omitempty"`
	Imagerotated          int32                 `protobuf:"varint,18,opt,name=imagerotated" json:"imagerotated,omitempty"`
	Thumbnailsize         int32                 `protobuf:"varint,19,opt,name=thumbnailsize" json:"thumbnailsize,omitempty"`
	Webfilename           string                `protobuf:"bytes,20,opt,name=webfilename" json:"webfilename,omitempty"`
	Mimetype              string                `protobuf:"bytes,21,opt,name=mimetype" json:"mimetype,omitempty"`
	Inspiresponsedata     *InspiPutResponse     `protobuf:"bytes,22,opt,name=inspiresponsedata" json:"inspiresponsedata,omitempty"`
	Vendorwebresponsedata *VendorWebPutResponse `protobuf:"bytes,23,opt,name=vendorwebresponsedata" json:"vendorwebresponsedata,omitempty"`
	Guid                  string                `protobuf:"bytes,24,opt,name=guid" json:"guid,omitempty"`
}

func (m *JSONRPCResult) Reset()                    { *m = JSONRPCResult{} }
func (m *JSONRPCResult) String() string            { return proto.CompactTextString(m) }
func (*JSONRPCResult) ProtoMessage()               {}
func (*JSONRPCResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JSONRPCResult) GetContractorid() int32 {
	if m != nil {
		return m.Contractorid
	}
	return 0
}

func (m *JSONRPCResult) GetReleasedate() string {
	if m != nil {
		return m.Releasedate
	}
	return ""
}

func (m *JSONRPCResult) GetScandate() string {
	if m != nil {
		return m.Scandate
	}
	return ""
}

func (m *JSONRPCResult) GetImagetype() int32 {
	if m != nil {
		return m.Imagetype
	}
	return 0
}

func (m *JSONRPCResult) GetImagewidth() int32 {
	if m != nil {
		return m.Imagewidth
	}
	return 0
}

func (m *JSONRPCResult) GetImageheight() int32 {
	if m != nil {
		return m.Imageheight
	}
	return 0
}

func (m *JSONRPCResult) GetDeptcode() string {
	if m != nil {
		return m.Deptcode
	}
	return ""
}

func (m *JSONRPCResult) GetDescprefix() string {
	if m != nil {
		return m.Descprefix
	}
	return ""
}

func (m *JSONRPCResult) GetDesctext() string {
	if m != nil {
		return m.Desctext
	}
	return ""
}

func (m *JSONRPCResult) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *JSONRPCResult) GetOrdernumber() int64 {
	if m != nil {
		return m.Ordernumber
	}
	return 0
}

func (m *JSONRPCResult) GetArchived() string {
	if m != nil {
		return m.Archived
	}
	return ""
}

func (m *JSONRPCResult) GetDatecreated() string {
	if m != nil {
		return m.Datecreated
	}
	return ""
}

func (m *JSONRPCResult) GetDatemodefied() string {
	if m != nil {
		return m.Datemodefied
	}
	return ""
}

func (m *JSONRPCResult) GetFilesize() int32 {
	if m != nil {
		return m.Filesize
	}
	return 0
}

func (m *JSONRPCResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *JSONRPCResult) GetImagefilename() string {
	if m != nil {
		return m.Imagefilename
	}
	return ""
}

func (m *JSONRPCResult) GetImagerotated() int32 {
	if m != nil {
		return m.Imagerotated
	}
	return 0
}

func (m *JSONRPCResult) GetThumbnailsize() int32 {
	if m != nil {
		return m.Thumbnailsize
	}
	return 0
}

func (m *JSONRPCResult) GetWebfilename() string {
	if m != nil {
		return m.Webfilename
	}
	return ""
}

func (m *JSONRPCResult) GetMimetype() string {
	if m != nil {
		return m.Mimetype
	}
	return ""
}

func (m *JSONRPCResult) GetInspiresponsedata() *InspiPutResponse {
	if m != nil {
		return m.Inspiresponsedata
	}
	return nil
}

func (m *JSONRPCResult) GetVendorwebresponsedata() *VendorWebPutResponse {
	if m != nil {
		return m.Vendorwebresponsedata
	}
	return nil
}

func (m *JSONRPCResult) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

// Message when Put request failed
type JSONRPCError struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *JSONRPCError) Reset()                    { *m = JSONRPCError{} }
func (m *JSONRPCError) String() string            { return proto.CompactTextString(m) }
func (*JSONRPCError) ProtoMessage()               {}
func (*JSONRPCError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *JSONRPCError) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *JSONRPCError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *JSONRPCError) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// Response from the servicebus Put call
type JSONRPCResponse struct {
	Jsonrpc string         `protobuf:"bytes,1,opt,name=jsonrpc" json:"jsonrpc,omitempty"`
	Id      int32          `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Result  *JSONRPCResult `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	Error   *JSONRPCError  `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *JSONRPCResponse) Reset()                    { *m = JSONRPCResponse{} }
func (m *JSONRPCResponse) String() string            { return proto.CompactTextString(m) }
func (*JSONRPCResponse) ProtoMessage()               {}
func (*JSONRPCResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *JSONRPCResponse) GetJsonrpc() string {
	if m != nil {
		return m.Jsonrpc
	}
	return ""
}

func (m *JSONRPCResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *JSONRPCResponse) GetResult() *JSONRPCResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *JSONRPCResponse) GetError() *JSONRPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*PutRequest)(nil), "contentservice.PutRequest")
	proto.RegisterType((*JSONRPCRequest)(nil), "contentservice.JSONRPCRequest")
	proto.RegisterType((*PutResponse)(nil), "contentservice.PutResponse")
	proto.RegisterType((*InspiPutResponse)(nil), "contentservice.InspiPutResponse")
	proto.RegisterType((*VendorWebPutResponse)(nil), "contentservice.VendorWebPutResponse")
	proto.RegisterType((*JSONRPCResult)(nil), "contentservice.JSONRPCResult")
	proto.RegisterType((*JSONRPCError)(nil), "contentservice.JSONRPCError")
	proto.RegisterType((*JSONRPCResponse)(nil), "contentservice.JSONRPCResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContentService service

type ContentServiceClient interface {
	// Makes a Put call
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
}

type contentServiceClient struct {
	cc *grpc.ClientConn
}

func NewContentServiceClient(cc *grpc.ClientConn) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/contentservice.ContentService/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContentService service

type ContentServiceServer interface {
	// Makes a Put call
	Put(context.Context, *PutRequest) (*PutResponse, error)
}

func RegisterContentServiceServer(s *grpc.Server, srv ContentServiceServer) {
	s.RegisterService(&_ContentService_serviceDesc, srv)
}

func _ContentService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentservice.ContentService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "contentservice.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _ContentService_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contentservice.proto",
}

func init() { proto.RegisterFile("contentservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0xdb, 0x38,
	0x10, 0x5e, 0xff, 0x26, 0x1e, 0xc7, 0x4e, 0xc2, 0x4d, 0xb2, 0x84, 0x37, 0x1b, 0x18, 0x42, 0xb0,
	0xc8, 0x29, 0x07, 0x2f, 0x16, 0xd8, 0xe3, 0x02, 0xc1, 0x1e, 0xb6, 0x87, 0xd4, 0x50, 0x80, 0x16,
	0xc8, 0x8d, 0x16, 0x27, 0x36, 0x0b, 0x4b, 0x54, 0x49, 0x2a, 0x3f, 0x7d, 0xa0, 0x9e, 0xfb, 0x18,
	0x7d, 0x8f, 0xbe, 0x48, 0x41, 0x52, 0x92, 0x25, 0xc5, 0x29, 0x8a, 0xf6, 0xa6, 0xf9, 0xf8, 0x0d,
	0x87, 0xf3, 0xf3, 0x8d, 0xe0, 0x28, 0x92, 0x89, 0xc1, 0xc4, 0x68, 0x54, 0xf7, 0x22, 0xc2, 0xcb,
	0x54, 0x49, 0x23, 0xc9, 0xb8, 0x8e, 0x06, 0x9f, 0xda, 0x00, 0xf3, 0xcc, 0x84, 0xf8, 0x3e, 0x43,
	0x6d, 0x48, 0x00, 0x7b, 0x96, 0xa0, 0x58, 0x64, 0xa4, 0x12, 0x9c, 0xb6, 0xa6, 0xad, 0x8b, 0x4e,
	0x58, 0xc3, 0xc8, 0x14, 0x86, 0x52, 0x71, 0x54, 0x49, 0x16, 0x2f, 0x50, 0xd1, 0xb6, 0xa3, 0x54,
	0x21, 0x72, 0x0a, 0x03, 0x11, 0xb3, 0x25, 0x9a, 0xa7, 0x14, 0x69, 0x67, 0xda, 0xba, 0xe8, 0x85,
	0x1b, 0x80, 0x4c, 0x60, 0xf7, 0x4e, 0xac, 0x31, 0x61, 0x31, 0xd2, 0xee, 0xb4, 0x75, 0x31, 0x08,
	0x4b, 0x9b, 0x9c, 0x01, 0x38, 0xe2, 0x83, 0xe0, 0x66, 0x45, 0x7b, 0xce, 0xb5, 0x82, 0xd8, 0xd8,
	0xce, 0x5a, 0xa1, 0x58, 0xae, 0x0c, 0xed, 0x3b, 0x42, 0x15, 0xb2, 0x0c, 0x85, 0x6b, 0x64, 0x1a,
	0x39, 0x33, 0x48, 0x77, 0x5c, 0x80, 0x2a, 0x64, 0xe3, 0x73, 0x4c, 0x4d, 0x24, 0x39, 0xd2, 0x5d,
	0x1f, 0xbf, 0xb0, 0x6d, 0xfe, 0xf6, 0x2d, 0x45, 0x91, 0xe8, 0xc0, 0x9d, 0xd7, 0xb0, 0xe0, 0x73,
	0x0b, 0xc6, 0xaf, 0x6e, 0x5e, 0x5f, 0x87, 0xf3, 0xab, 0xa2, 0x6c, 0x14, 0x76, 0xde, 0x69, 0x99,
	0xa8, 0x34, 0x72, 0x15, 0x1b, 0x84, 0x85, 0x49, 0x4e, 0xa0, 0x1f, 0xa3, 0x59, 0x49, 0xee, 0xea,
	0x34, 0x08, 0x73, 0x8b, 0xcc, 0xa0, 0x9f, 0x32, 0xc5, 0x62, 0xed, 0xea, 0x33, 0x9c, 0x4d, 0x2e,
	0x1b, 0xed, 0xda, 0x34, 0x25, 0xcc, 0x99, 0x64, 0x0c, 0x6d, 0xc1, 0x5d, 0xc9, 0x7a, 0x61, 0x5b,
	0x70, 0xf2, 0x27, 0x8c, 0x99, 0x7e, 0x4a, 0xa2, 0x18, 0xb5, 0x66, 0x4b, 0x14, 0x3c, 0x2f, 0x58,
	0x03, 0xb5, 0xaf, 0xb3, 0xdd, 0xb3, 0x04, 0x5f, 0xb0, 0xc2, 0x0c, 0x1e, 0x61, 0xe8, 0xe2, 0xe8,
	0x54, 0x26, 0x1a, 0xc9, 0xdf, 0xd0, 0x57, 0xa8, 0xb3, 0xb5, 0x71, 0x59, 0x0c, 0x67, 0x7f, 0x34,
	0x1f, 0x55, 0xa6, 0x6d, 0x49, 0x61, 0x4e, 0x26, 0x33, 0xe8, 0xa1, 0x52, 0xd2, 0x8f, 0xc2, 0x70,
	0x76, 0xfa, 0x82, 0xd7, 0x7f, 0x96, 0x13, 0x7a, 0x6a, 0xf0, 0x0f, 0x1c, 0xfc, 0x9f, 0xe8, 0x54,
	0x54, 0xc3, 0x9f, 0xc3, 0x28, 0x5d, 0x49, 0x23, 0x39, 0x1a, 0x26, 0xd6, 0xe5, 0xf4, 0xd5, 0xc1,
	0xe0, 0x16, 0x8e, 0xde, 0x60, 0xc2, 0xa5, 0x7a, 0x8b, 0x8b, 0xaa, 0xf7, 0x19, 0x00, 0x97, 0x51,
	0x16, 0x63, 0x62, 0x4a, 0xd7, 0x0a, 0x62, 0x5b, 0xcb, 0x92, 0x44, 0x1a, 0x66, 0x84, 0x4c, 0x04,
	0xcf, 0xe7, 0xb6, 0x86, 0x05, 0x5f, 0xfa, 0x30, 0xaa, 0xe5, 0xb8, 0x55, 0x10, 0xbd, 0xe7, 0x82,
	0xa8, 0x8e, 0x5c, 0x7b, 0xeb, 0xc8, 0xe9, 0x88, 0x25, 0xee, 0xb8, 0xe3, 0x47, 0xae, 0xb0, 0xeb,
	0x62, 0xe9, 0x36, 0xc5, 0xf2, 0xf3, 0x82, 0xa8, 0x8e, 0xfb, 0x4e, 0x63, 0xdc, 0x6d, 0xcd, 0x50,
	0x47, 0xa9, 0xc2, 0x3b, 0xf1, 0x98, 0x8b, 0xa1, 0x82, 0x78, 0x5f, 0x1d, 0x19, 0x7c, 0x34, 0xb9,
	0x14, 0x4a, 0xdb, 0x9e, 0x45, 0xcc, 0xe0, 0x52, 0xaa, 0x27, 0x0a, 0xfe, 0xac, 0xb0, 0x9b, 0x2b,
	0x62, 0xf8, 0x7c, 0x45, 0x4c, 0x60, 0x97, 0xa9, 0x68, 0x25, 0xee, 0x91, 0xd3, 0x3d, 0xef, 0x5d,
	0xd8, 0xd6, 0xdb, 0x56, 0x26, 0x52, 0xc8, 0x0c, 0x72, 0x3a, 0xf2, 0xf5, 0xac, 0x40, 0xb6, 0x2b,
	0xd6, 0x8c, 0x25, 0xc7, 0x3b, 0x81, 0x9c, 0x8e, 0xbd, 0x4c, 0xab, 0x58, 0xb1, 0x66, 0xb4, 0xf8,
	0x80, 0x74, 0xdf, 0x95, 0xa5, 0xb4, 0x73, 0x25, 0x1d, 0x94, 0x4a, 0x3a, 0x87, 0x91, 0x2b, 0x59,
	0xb9, 0x97, 0x0e, 0xdd, 0x85, 0x75, 0xd0, 0x46, 0x75, 0x80, 0xb2, 0x03, 0x83, 0x9c, 0x12, 0x3f,
	0x0b, 0x55, 0xcc, 0xde, 0x64, 0x56, 0x59, 0xbc, 0x48, 0x98, 0x58, 0xbb, 0xd0, 0xbf, 0x3a, 0x52,
	0x1d, 0xb4, 0x19, 0x3e, 0xe0, 0xa2, 0x8c, 0x76, 0xe4, 0x33, 0xac, 0x40, 0xf6, 0xf5, 0xb1, 0x88,
	0xfd, 0x50, 0x1c, 0xfb, 0xfa, 0x14, 0x36, 0xb9, 0x86, 0x43, 0x61, 0xb5, 0xa3, 0xf2, 0xd1, 0xe7,
	0xcc, 0x30, 0x7a, 0xe2, 0xb4, 0x37, 0x6d, 0x6a, 0xaf, 0x29, 0xb2, 0xf0, 0xb9, 0x2b, 0xb9, 0x85,
	0xe3, 0x7b, 0xa7, 0xa8, 0x07, 0x5c, 0xd4, 0xee, 0xfc, 0xcd, 0xdd, 0x79, 0xde, 0xbc, 0x73, 0x9b,
	0xfc, 0xc2, 0xed, 0x57, 0x10, 0x02, 0xdd, 0x65, 0x26, 0x38, 0xa5, 0x2e, 0x07, 0xf7, 0x1d, 0xcc,
	0x61, 0xaf, 0xba, 0x12, 0x2c, 0xc7, 0x4d, 0xa7, 0xd7, 0x96, 0xfb, 0xb6, 0x3b, 0x2b, 0x5f, 0x60,
	0xb9, 0x9e, 0x0a, 0xd3, 0xb2, 0xdd, 0xe3, 0xbc, 0x8e, 0xdc, 0x77, 0xf0, 0xb1, 0x05, 0xfb, 0x1b,
	0xdd, 0xfa, 0x7d, 0xf0, 0xf2, 0x4e, 0xf6, 0xdd, 0x6f, 0x97, 0xdd, 0xdf, 0xac, 0xbd, 0xce, 0x0f,
	0xad, 0xbd, 0xee, 0x77, 0xaf, 0xbd, 0x59, 0x08, 0xe3, 0x2b, 0xcf, 0xba, 0xf1, 0x2c, 0xf2, 0x2f,
	0x74, 0xe6, 0x99, 0x21, 0xdf, 0xd8, 0xff, 0x93, 0xdf, 0xb7, 0x9e, 0xf9, 0x34, 0x83, 0x5f, 0x16,
	0x7d, 0xf7, 0x67, 0xff, 0xeb, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x1b, 0xf2, 0x4e, 0xf1,
	0x07, 0x00, 0x00,
}
